0.1:
*Arduino: autorange series resistor
*Arduino: convert voltages to impedance
*extract droplet velocity

0.2:
*check protocol/version on connect
*calibration functions
*global voltage/frequency (override per step)
*don't set voltage/frequency if they haven't changed
*switch serialization to JSON
*make serialization upgradeable
*disable gui components if no device is loaded
*disable protocol save/load/rename/etc. unless a device is loaded
*guess channel numbers

0.3
*fix case of arduino functions begin() vs. Listen()
*add find method
*retransmit packets on timeout or CRC error
*add packet number*Arduino: don't block on function calls (e.g. SampleVoltage
 and MeasureImpedance).  Instead, have device notify
 once the command has finished
*Arduino: add commands to RemoteObject for AnalogRead/Write,
 DigitalRead/Write, I2C, SPI (Replace SampleVoltageOB
 with AnalogRead)
*auto set number of channels based on info from device
 (give warning if channel number in protocol exceeds control
 board capability)
*read PCA9505 chip to automaticall get number of channels and state
*documentation

0.4
*break ProtocolController into Controller and View
*Arduino: update MAX_SAMPLES to be max bytes
*Redesign protocol class to allow for arbitrary
 step types (check with ResourceManager to dispatch
 functions to the right object)
*list view for protocol
*repeat for step/group
*cut and paste steps
*subprotocols (e.g. dispense) that can be assigned to the
 right-click menu of an electrode

0.5
*PluginManager class to abstract the use of
 different hardware, add custom functionality
*check_int/float should also enforce ranges
*error boxes when communication w/ device fails

0.6
*video capture

0.7
*refactor code into client/daemon

1.0
*make installer (Inno or Nullsoft)
*auto update over internet
*unit tests
*build tests
*online device database
*store performance data in online repository

